import tkinter as tk
from tkinter import messagebox
import random

class QuizGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Quiz Game")
        self.root.geometry("500x400")
        
        self.questions = [
            {"question": "What is the capital of France?", "options": ["A. London", "B. Berlin", "C. Paris", "D. Rome"], "answer": "C"},
            {"question": "Which planet is known as the Red Planet?", "options": ["A. Earth", "B. Mars", "C. Jupiter", "D. Venus"], "answer": "B"},
            {"question": "What is 5 + 7?", "options": ["A. 10", "B. 11", "C. 12", "D. 13"], "answer": "C"},
            {"question": "Who wrote 'Romeo and Juliet'?", "options": ["A. William Wordsworth", "B. William Shakespeare", "C. Charles Dickens", "D. Jane Austen"], "answer": "B"},
            {"question": "What is the largest mammal in the world?", "options": ["A. Elephant", "B. Blue Whale", "C. Great White Shark", "D. Giraffe"], "answer": "B"}
        ]
        
        self.current_question = 0
        self.score = 0
        
        self.label_question = tk.Label(root, text="", font=("Arial", 16), wraplength=400)
        self.label_question.pack(pady=20)

        self.options_var = tk.StringVar()
        self.radio_buttons = []
        
        for i in range(4):
            rb = tk.Radiobutton(root, text="", variable=self.options_var, font=("Arial", 12), value=f"{chr(65+i)}")
            rb.pack(anchor="w")
            self.radio_buttons.append(rb)

        self.button_next = tk.Button(root, text="Next", command=self.check_answer, font=("Arial", 14))
        self.button_next.pack(pady=20)

        self.feedback_label = tk.Label(root, text="", font=("Arial", 14), fg="blue")
        self.feedback_label.pack()
        
        self.animate_background()
        self.load_question()

    def animate_background(self):
        color1 = "#" + "".join([random.choice("0123456789ABCDEF") for _ in range(6)])
        color2 = "#" + "".join([random.choice("0123456789ABCDEF") for _ in range(6)])
        self.root.config(bg=color1)
        self.label_question.config(bg=color1)
        self.feedback_label.config(bg=color1)

        for rb in self.radio_buttons:
            rb.config(bg=color1)

        self.button_next.config(bg=color2)
        self.root.after(1000, self.animate_background)

    def load_question(self):
        if self.current_question < len(self.questions):
            q = self.questions[self.current_question]
            self.label_question.config(text=f"Question {self.current_question + 1}: {q['question']}")
            self.options_var.set("")
            
            for i, option in enumerate(q['options']):
                self.radio_buttons[i].config(text=option, value=option[0])
        else:
            messagebox.showinfo("Quiz Completed", f"Game Over! Your score: {self.score}/{len(self.questions)}")
            self.root.quit()

    def animate_feedback(self, text, color):
        self.feedback_label.config(text=text, fg=color)
        self.fade_in(self.feedback_label)

    def fade_in(self, widget, alpha=0.0):
        if alpha <= 1.0:
            widget.config(fg=self.fade_color(widget.cget("fg"), alpha))
            self.root.after(50, self.fade_in, widget, alpha + 0.1)

    def fade_color(self, color, alpha):
        colors = {"green": (0, 255, 0), "red": (255, 0, 0), "blue": (0, 0, 255), "orange": (255, 165, 0)}
        r, g, b = colors.get(color, (0, 0, 0))
        return f"#{int(r*alpha):02x}{int(g*alpha):02x}{int(b*alpha):02x}"

    def check_answer(self):
        selected_answer = self.options_var.get()
        
        if not selected_answer:
            self.animate_feedback("Please select an answer.", "orange")
            return
        
        correct_answer = self.questions[self.current_question]['answer']
        
        if selected_answer == correct_answer:
            self.animate_feedback("Correct!", "green")
            self.score += 1
        else:
            self.animate_feedback(f"Wrong! Correct answer was {correct_answer}", "red")
        
        self.current_question += 1
        self.root.after(1500, self.load_question)

if __name__ == "__main__":
    root = tk.Tk()
    game = QuizGame(root)
    root.mainloop()
